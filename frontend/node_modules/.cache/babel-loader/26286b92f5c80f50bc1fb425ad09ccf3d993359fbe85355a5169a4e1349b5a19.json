{"ast":null,"code":"class StockChart {\n  constructor() {\n    // 정보 패널 업데이트 로직\n    this.updateInfoPanel = time => {\n      var _dataPoint$volume;\n      let displayTime = time;\n      let dataPoint = null;\n      if (displayTime === null && this.latestData) {\n        // 마우스 벗어남 -> 최신 데이터 사용\n        displayTime = this.latestData.time;\n      }\n      if (displayTime !== null) {\n        dataPoint = this.dataMap.get(displayTime); // Map에서 데이터 조회\n      }\n\n      // 데이터 없으면 패널 숨김\n      if (!dataPoint) {\n        document.getElementById('stockInfoPanel').style.display = 'none';\n        document.getElementById('volumeInfoPanel').style.display = 'none';\n        return;\n      }\n      const date = new Date(dataPoint.time * 1000);\n      let dateStr = this.formatDateForDisplay(date);\n      const volumeValue = (_dataPoint$volume = dataPoint.volume) !== null && _dataPoint$volume !== void 0 ? _dataPoint$volume : 0;\n\n      // 유효성 검사\n      if (isNaN(dataPoint.open) || isNaN(dataPoint.high) || isNaN(dataPoint.low) || isNaN(dataPoint.close) || isNaN(volumeValue)) {\n        document.getElementById('stockInfoPanel').style.display = 'none';\n        document.getElementById('volumeInfoPanel').style.display = 'none';\n        return;\n      }\n      const priceChange = dataPoint.close - dataPoint.open;\n      const priceChangePercent = dataPoint.open === 0 ? 0 : priceChange / dataPoint.open * 100;\n      const priceDirection = priceChange >= 0 ? 'up' : 'down';\n      const sign = priceChange >= 0 ? '+' : '';\n      const color = priceDirection === 'up' ? '#ff3333' : '#5050ff'; // 빨강/파랑\n\n      // 패널 업데이트\n      let stockCodeName = this.stockInfo || this.stockCode;\n      document.getElementById('stockInfoPanel').innerHTML = `\n            <span style=\"font-weight: bold;\">${stockCodeName}</span> <span style=\"font-size: 10px;\">${dateStr}</span><br>\n            <span>시가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.open)}</span></span>\n            <span style=\"margin-left: 5px;\">고가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.high)}</span></span>\n            <span style=\"margin-left: 5px;\">저가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.low)}</span></span>\n            <span style=\"margin-left: 5px;\">종가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.close)}</span></span>\n            <span style=\"color: ${color}; margin-left: 5px;\">(${sign}${this.formatNumber(priceChange)} ${sign}${priceChangePercent.toFixed(2)}%)</span>\n        `;\n      document.getElementById('volumeInfoPanel').innerHTML = `\n            거래량 <span style=\"color: ${color};\">${this.formatVolume(volumeValue)}</span>\n        `;\n      document.getElementById('stockInfoPanel').style.display = 'block';\n      document.getElementById('volumeInfoPanel').style.display = 'block';\n    };\n    this.stockCode = '005930';\n    this.chartWrapper = document.querySelector('.chart-wrapper');\n    this.chartContainer = document.querySelector('.chart-container');\n    this.priceChart = null; // 가격 차트\n    this.volumeChart = null; // 거래량 차트\n    this.candlestickSeries = null; // 캔들스틱 시리즈\n    this.volumeSeries = null; // 거래량 시리즈\n    this.chartType = 'daily';\n    this.minuteType = '1'; // 기본 1분봉\n    this.resizeHandle = null;\n    this.startHeight = 0;\n    this.startY = 0;\n    this.stockInfo = null; // 종목명\n    this.latestData = null; // 최신 데이터 저장용\n    this.movingAverageSeries = {}; // 이동평균선 시리즈 저장용\n    this.dataMap = new Map(); // 시간 기반 데이터 조회를 위한 Map\n    this.isSyncing = false; // 동기화 중복 방지 플래그\n    this.init();\n  }\n  init() {\n    console.log('Initializing StockChart...');\n    this.createChart();\n    this.setupEventListeners();\n    this.fetchChartData();\n  }\n\n  // 숫자 포맷 (콤마, M/K 단위)\n  formatNumber(num, precision = 0) {\n    if (num === null || num === undefined || isNaN(num)) return 'N/A';\n    if (Math.abs(num) >= 1000000000) {\n      return (num / 1000000000).toFixed(2) + 'B';\n    } else if (Math.abs(num) >= 1000000) {\n      return (num / 1000000).toFixed(2) + 'M';\n    } else if (Math.abs(num) >= 1000) {\n      // 거래량 외에는 K 단위 사용 안 함\n      return num.toLocaleString(undefined, {\n        minimumFractionDigits: precision,\n        maximumFractionDigits: precision\n      });\n    }\n    return num.toLocaleString(undefined, {\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision\n    });\n  }\n\n  // 거래량 포맷 (M/K 단위 특화)\n  formatVolume(num) {\n    if (num === null || num === undefined || isNaN(num)) return 'N/A';\n    if (Math.abs(num) >= 1000000) {\n      return (num / 1000000).toFixed(2) + 'M';\n    } else if (Math.abs(num) >= 1000) {\n      return (num / 1000).toFixed(2) + 'K';\n    }\n    return num.toString();\n  }\n  createChart() {\n    console.log('Creating chart...');\n\n    // 토스증권 스타일로 두 개의 차트 영역 생성\n    this.chartContainer.innerHTML = `\n            <div class=\"chart-separator\">\n                <div id=\"priceChartContainer\" style=\"width: 100%; height: 65%; position: relative;\">\n                    <div id=\"stockInfoPanel\" style=\"position: absolute; top: 5px; left: 5px; background: rgba(255,255,255,0.85); padding: 5px 8px; border-radius: 4px; font-size: 11px; color: black; z-index: 10; pointer-events: none; line-height: 1.4;\"></div>\n                </div>\n                <div class=\"divider\" style=\"width: 100%; height: 2px; background-color: #dddddd;\"></div>\n                <div id=\"volumeChartContainer\" style=\"width: 100%; height: 35%; position: relative;\">\n                    <div id=\"volumeInfoPanel\" style=\"position: absolute; top: 5px; left: 5px; background: rgba(255,255,255,0.85); padding: 3px 6px; border-radius: 4px; font-size: 11px; color: black; z-index: 10; pointer-events: none;\"></div>\n                </div>\n            </div>\n        `;\n\n    // 차트 컨테이너 크기\n    const containerWidth = this.chartContainer.clientWidth;\n    const priceChartHeight = Math.floor(this.chartContainer.clientHeight * 0.65);\n    const volumeChartHeight = Math.floor(this.chartContainer.clientHeight * 0.35) - 2; // 구분선 높이 2px 고려\n\n    // 공통 차트 옵션\n    const commonOptions = {\n      width: containerWidth,\n      layout: {\n        background: {\n          color: '#ffffff'\n        },\n        textColor: '#333333',\n        fontFamily: \"'Open Sans', sans-serif\"\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      crosshair: {\n        mode: LightweightCharts.CrosshairMode.Normal,\n        vertLine: {\n          color: '#999999',\n          width: 1,\n          style: 1,\n          labelBackgroundColor: '#ffffff',\n          labelVisible: false // x축 라벨 숨김\n        },\n        horzLine: {\n          color: '#999999',\n          width: 1,\n          style: 1,\n          labelBackgroundColor: '#ffffff'\n        }\n      },\n      timeScale: {\n        borderColor: '#dddddd',\n        borderVisible: true,\n        timeVisible: true,\n        secondsVisible: false,\n        tickMarkFormatter: time => {\n          const date = new Date(time * 1000);\n          if (this.chartType === 'yearly') return date.getFullYear();\n          if (this.chartType === 'monthly') return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n          return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n        }\n      },\n      handleScroll: true,\n      handleScale: true\n    };\n\n    // 1. 가격 차트 생성 (상단 65%)\n    this.priceChart = LightweightCharts.createChart(document.getElementById('priceChartContainer'), {\n      ...commonOptions,\n      height: priceChartHeight,\n      rightPriceScale: {\n        borderColor: '#dddddd',\n        borderVisible: true,\n        scaleMargins: {\n          top: 0.1,\n          bottom: 0.1\n        },\n        visible: true,\n        autoScale: true\n      }\n    });\n\n    // 2. 거래량 차트 생성 (하단 35%)\n    this.volumeChart = LightweightCharts.createChart(document.getElementById('volumeChartContainer'), {\n      ...commonOptions,\n      height: volumeChartHeight,\n      rightPriceScale: {\n        borderColor: '#dddddd',\n        borderVisible: true,\n        scaleMargins: {\n          top: 0.1,\n          bottom: 0.1\n        },\n        visible: true,\n        autoScale: true\n      }\n    });\n\n    // 캔들스틱 시리즈 추가 (가격 차트)\n    this.candlestickSeries = this.priceChart.addCandlestickSeries({\n      upColor: '#ff3333',\n      downColor: '#5050ff',\n      borderVisible: false,\n      wickUpColor: '#ff3333',\n      wickDownColor: '#5050ff',\n      priceFormat: {\n        type: 'price',\n        precision: 0,\n        minMove: 1\n      }\n    });\n\n    // 거래량 시리즈 추가 (거래량 차트)\n    this.volumeSeries = this.volumeChart.addHistogramSeries({\n      color: '#26a69a',\n      priceFormat: {\n        type: 'volume'\n      },\n      priceScaleId: 'volume',\n      scaleMargins: {\n        top: 0.1,\n        bottom: 0.1\n      }\n    });\n\n    // 차트 싱크 설정 (스크롤 및 줌 동기화)\n    this.syncCharts();\n\n    // 크로스헤어 동기화 설정\n    this.setupCrosshairSync();\n\n    // 윈도우 리사이즈 이벤트\n    window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  // 차트 동기화 설정\n  syncCharts() {\n    // 시간 스케일(가로축) 동기화\n    this.priceChart.timeScale().subscribeVisibleLogicalRangeChange(timeRange => {\n      if (timeRange && !this.isSyncing) {\n        this.isSyncing = true;\n        this.volumeChart.timeScale().setVisibleLogicalRange(timeRange);\n        this.isSyncing = false;\n      }\n    });\n    this.volumeChart.timeScale().subscribeVisibleLogicalRangeChange(timeRange => {\n      if (timeRange && !this.isSyncing) {\n        this.isSyncing = true;\n        this.priceChart.timeScale().setVisibleLogicalRange(timeRange);\n        this.isSyncing = false;\n      }\n    });\n  }\n\n  // 날짜 포맷 함수 분리\n  formatDateForDisplay(date) {\n    switch (this.chartType) {\n      case 'yearly':\n        return date.getFullYear().toString();\n      case 'monthly':\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n      case 'daily':\n      case 'weekly':\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n      case 'minute':\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      default:\n        return date.toLocaleDateString('ko-KR');\n    }\n  }\n  setupEventListeners() {\n    const stockSelect = document.getElementById('stockSelector');\n    stockSelect.value = this.stockCode;\n    stockSelect.addEventListener('change', e => {\n      this.stockCode = e.target.value;\n      const stockOption = stockSelect.options[stockSelect.selectedIndex];\n      this.stockInfo = stockOption.textContent;\n      this.fetchChartData();\n    });\n    const minuteSelect = document.getElementById('minuteSelector');\n    minuteSelect.addEventListener('change', e => {\n      this.minuteType = e.target.value;\n      this.fetchChartData();\n    });\n    const chartTypeBtns = document.querySelectorAll('.chart-type-btn');\n    chartTypeBtns.forEach(btn => {\n      btn.addEventListener('click', e => {\n        const newType = e.target.dataset.type;\n        chartTypeBtns.forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        this.chartType = newType;\n        const minuteSelector = document.getElementById('minuteSelector');\n        minuteSelector.style.display = newType === 'minute' ? 'block' : 'none';\n        this.fetchChartData();\n      });\n    });\n\n    // 윈도우 리사이즈 시 차트 크기 조정\n    window.addEventListener('resize', this.handleResize.bind(this));\n\n    // 초기 리사이즈 실행\n    this.handleResize();\n    const stockOption = stockSelect.options[stockSelect.selectedIndex];\n    this.stockInfo = stockOption.textContent;\n  }\n\n  // 차트 크기 조정 처리\n  handleResize() {\n    if (!this.priceChart || !this.volumeChart) return;\n    const chartWidth = this.chartContainer.clientWidth;\n    const totalHeight = this.chartContainer.clientHeight;\n    const priceChartHeight = Math.floor(totalHeight * 0.65);\n    const volumeChartHeight = Math.floor(totalHeight * 0.35) - 2; // 구분선 높이 2px 고려\n\n    // 차트 크기 조정\n    this.priceChart.resize(chartWidth, priceChartHeight);\n    this.volumeChart.resize(chartWidth, volumeChartHeight);\n    console.log(`차트 크기 조정: ${chartWidth}x${totalHeight} (가격: ${priceChartHeight}, 거래량: ${volumeChartHeight})`);\n  }\n  async fetchChartData() {\n    try {\n      console.log(`Fetching ${this.chartType} chart data for stock ${this.stockCode}...`);\n      let apiId;\n      let requestData = {\n        stk_cd: this.stockCode,\n        upd_stkpc_tp: \"1\"\n      };\n      switch (this.chartType) {\n        case 'minute':\n          apiId = 'KA10080';\n          requestData.tic_scope = this.minuteType;\n          break;\n        case 'daily':\n          apiId = 'KA10081';\n          break;\n        case 'weekly':\n          apiId = 'KA10082';\n          break;\n        case 'monthly':\n          apiId = 'KA10083';\n          break;\n        case 'yearly':\n          apiId = 'KA10094';\n          break;\n        default:\n          apiId = 'KA10081';\n      }\n      const response = await fetch(`/api/stock/daily-chart/${this.stockCode}?apiId=${apiId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n      console.log('Received data:', data);\n      let chartData;\n      switch (this.chartType) {\n        case 'monthly':\n          chartData = data.stk_mth_pole_chart_qry;\n          break;\n        case 'daily':\n          chartData = data.stk_dt_pole_chart_qry;\n          break;\n        case 'weekly':\n          chartData = data.stk_stk_pole_chart_qry;\n          break;\n        case 'yearly':\n          chartData = data.stk_yr_pole_chart_qry;\n          break;\n        case 'minute':\n          chartData = data.stk_min_pole_chart_qry || data.stk_stk_pole_chart_qry;\n          break;\n        default:\n          chartData = data.stk_dt_pole_chart_qry;\n      }\n      if (chartData && chartData.length > 0) {\n        const processedData = [];\n\n        // 데이터 처리\n        for (const item of chartData) {\n          // 날짜/시간 처리\n          let dateStr = this.chartType === 'minute' ? item.cntr_tm : item.dt || item.trd_dt;\n          if (!dateStr) continue;\n\n          // 날짜 생성\n          let timestamp;\n          try {\n            if (this.chartType === 'yearly' && dateStr.length === 4) {\n              // 년도 데이터 처리 (YYYY)\n              timestamp = new Date(parseInt(dateStr), 0, 1).getTime() / 1000;\n            } else if (this.chartType === 'minute' && dateStr.length === 14) {\n              // 분 데이터 처리 (YYYYMMDDhhmmss)\n              timestamp = new Date(parseInt(dateStr.slice(0, 4)), parseInt(dateStr.slice(4, 6)) - 1, parseInt(dateStr.slice(6, 8)), parseInt(dateStr.slice(8, 10)), parseInt(dateStr.slice(10, 12))).getTime() / 1000;\n            } else if (dateStr.length === 8) {\n              // 일/주/월 데이터 처리 (YYYYMMDD)\n              timestamp = new Date(parseInt(dateStr.slice(0, 4)), parseInt(dateStr.slice(4, 6)) - 1, parseInt(dateStr.slice(6, 8))).getTime() / 1000;\n            } else {\n              console.log('Invalid date format:', dateStr);\n              continue;\n            }\n          } catch (e) {\n            console.log('Date parsing error:', e, dateStr);\n            continue;\n          }\n          if (isNaN(timestamp)) {\n            console.log('Invalid timestamp for date:', dateStr);\n            continue;\n          }\n\n          // 가격 데이터 처리\n          let close = parseFloat(item.cur_prc || item.clos_prc);\n          if (isNaN(close)) continue;\n          let open = parseFloat(item.open_pric || item.open_prc);\n          let high = parseFloat(item.high_pric || item.high_prc);\n          let low = parseFloat(item.low_pric || item.low_prc);\n          let volume = parseFloat(item.trde_qty || item.trd_qty) || 0;\n\n          // NaN 값 처리\n          if (isNaN(open)) open = close;\n          if (isNaN(high)) high = Math.max(close, open);\n          if (isNaN(low)) low = Math.min(close, open);\n          processedData.push({\n            time: timestamp,\n            open,\n            high,\n            low,\n            close,\n            volume\n          });\n        }\n        if (processedData.length > 0) {\n          // 시간순 정렬\n          processedData.sort((a, b) => a.time - b.time);\n\n          // 캔들스틱 데이터\n          const candlestickData = processedData.map(({\n            time,\n            open,\n            high,\n            low,\n            close\n          }) => ({\n            time,\n            open,\n            high,\n            low,\n            close\n          }));\n\n          // 거래량 데이터 - 색상 설정 (상승 빨강, 하락 파랑)\n          const volumeData = processedData.map(({\n            time,\n            volume,\n            open,\n            close\n          }) => ({\n            time,\n            value: volume,\n            color: close >= open ? '#ff3333' : '#5050ff' // 상승(빨강), 하락(파랑)\n          }));\n\n          // 데이터 설정\n          this.candlestickSeries.setData(candlestickData);\n          this.volumeSeries.setData(volumeData);\n\n          // 차트 타입에 맞게 옵션 업데이트\n          this.updateChartOptionsForType();\n\n          // 차트 스케일 조정 (두 차트 모두)\n          this.priceChart.timeScale().fitContent();\n          this.volumeChart.timeScale().fitContent();\n\n          // 데이터 맵 저장 (정보 패널용)\n          this.dataMap = new Map(processedData.map(d => [d.time, d]));\n          this.latestData = processedData[processedData.length - 1];\n\n          // 정보 패널 업데이트\n          this.updateInfoPanel(null);\n          return;\n        }\n      }\n\n      // 유효한 데이터가 없는 경우\n      console.error('No valid chart data found');\n      this.candlestickSeries.setData([]);\n      this.volumeSeries.setData([]);\n      this.dataMap.clear();\n      this.latestData = null;\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n      this.candlestickSeries.setData([]);\n      this.volumeSeries.setData([]);\n      this.dataMap.clear();\n      this.latestData = null;\n    }\n  }\n\n  // 차트 타입에 따른 옵션 업데이트 함수 \n  updateChartOptionsForType() {\n    const timeScaleOptions = {\n      timeVisible: this.chartType === 'minute',\n      secondsVisible: false\n    };\n\n    // 두 차트 모두 옵션 업데이트\n    this.priceChart.applyOptions({\n      timeScale: timeScaleOptions\n    });\n    this.volumeChart.applyOptions({\n      timeScale: timeScaleOptions\n    });\n  }\n  // 크로스헤어 동기화 및 정보 패널 업데이트 로직\n  setupCrosshairSync() {\n    // 크로스헤어 동기화 (두 차트 간)\n    this.priceChart.subscribeCrosshairMove(param => {\n      if (!param.point || !param.time) {\n        this.volumeChart.clearCrosshairPosition();\n        if (!param.point) {\n          // 마우스가 차트 영역을 벗어나면 최신 데이터 표시\n          this.updateInfoPanel(null);\n        }\n        return;\n      }\n\n      // 거래량 차트 크로스헤어 동기화\n      this.volumeChart.setCrosshairPosition(param.point, param.time);\n\n      // 정보 패널 업데이트\n      this.updateInfoPanel(param.time);\n    });\n    this.volumeChart.subscribeCrosshairMove(param => {\n      if (!param.point || !param.time) {\n        this.priceChart.clearCrosshairPosition();\n        return;\n      }\n\n      // 가격 차트 크로스헤어 동기화\n      this.priceChart.setCrosshairPosition(param.point, param.time);\n\n      // 정보 패널 업데이트\n      this.updateInfoPanel(param.time);\n    });\n\n    // 마우스가 차트 컨테이너를 벗어날 때 처리\n    this.chartContainer.addEventListener('mouseleave', () => {\n      this.updateInfoPanel(null);\n    });\n  }\n}\n\n// 차트 초기화\ndocument.addEventListener('DOMContentLoaded', () => {\n  new StockChart();\n});","map":{"version":3,"names":["StockChart","constructor","updateInfoPanel","time","_dataPoint$volume","displayTime","dataPoint","latestData","dataMap","get","document","getElementById","style","display","date","Date","dateStr","formatDateForDisplay","volumeValue","volume","isNaN","open","high","low","close","priceChange","priceChangePercent","priceDirection","sign","color","stockCodeName","stockInfo","stockCode","innerHTML","formatNumber","toFixed","formatVolume","chartWrapper","querySelector","chartContainer","priceChart","volumeChart","candlestickSeries","volumeSeries","chartType","minuteType","resizeHandle","startHeight","startY","movingAverageSeries","Map","isSyncing","init","console","log","createChart","setupEventListeners","fetchChartData","num","precision","undefined","Math","abs","toLocaleString","minimumFractionDigits","maximumFractionDigits","toString","containerWidth","clientWidth","priceChartHeight","floor","clientHeight","volumeChartHeight","commonOptions","width","layout","background","textColor","fontFamily","grid","vertLines","horzLines","crosshair","mode","LightweightCharts","CrosshairMode","Normal","vertLine","labelBackgroundColor","labelVisible","horzLine","timeScale","borderColor","borderVisible","timeVisible","secondsVisible","tickMarkFormatter","getFullYear","getMonth","padStart","getDate","handleScroll","handleScale","height","rightPriceScale","scaleMargins","top","bottom","visible","autoScale","addCandlestickSeries","upColor","downColor","wickUpColor","wickDownColor","priceFormat","type","minMove","addHistogramSeries","priceScaleId","syncCharts","setupCrosshairSync","window","addEventListener","handleResize","bind","subscribeVisibleLogicalRangeChange","timeRange","setVisibleLogicalRange","getHours","getMinutes","toLocaleDateString","stockSelect","value","e","target","stockOption","options","selectedIndex","textContent","minuteSelect","chartTypeBtns","querySelectorAll","forEach","btn","newType","dataset","b","classList","remove","add","minuteSelector","chartWidth","totalHeight","resize","apiId","requestData","stk_cd","upd_stkpc_tp","tic_scope","response","fetch","method","headers","body","JSON","stringify","data","json","chartData","stk_mth_pole_chart_qry","stk_dt_pole_chart_qry","stk_stk_pole_chart_qry","stk_yr_pole_chart_qry","stk_min_pole_chart_qry","length","processedData","item","cntr_tm","dt","trd_dt","timestamp","parseInt","getTime","slice","parseFloat","cur_prc","clos_prc","open_pric","open_prc","high_pric","high_prc","low_pric","low_prc","trde_qty","trd_qty","max","min","push","sort","a","candlestickData","map","volumeData","setData","updateChartOptionsForType","fitContent","d","error","clear","timeScaleOptions","applyOptions","subscribeCrosshairMove","param","point","clearCrosshairPosition","setCrosshairPosition"],"sources":["C:/Users/moshu/Documents/team_fivesense/five_sense/fivesense/frontend/src/js/stockChart.js"],"sourcesContent":["class StockChart {\r\n    constructor() {\r\n        this.stockCode = '005930';\r\n        this.chartWrapper = document.querySelector('.chart-wrapper');\r\n        this.chartContainer = document.querySelector('.chart-container');\r\n        this.priceChart = null;        // 가격 차트\r\n        this.volumeChart = null;       // 거래량 차트\r\n        this.candlestickSeries = null; // 캔들스틱 시리즈\r\n        this.volumeSeries = null;      // 거래량 시리즈\r\n        this.chartType = 'daily';\r\n        this.minuteType = '1';         // 기본 1분봉\r\n        this.resizeHandle = null;\r\n        this.startHeight = 0;\r\n        this.startY = 0;\r\n        this.stockInfo = null;         // 종목명\r\n        this.latestData = null;        // 최신 데이터 저장용\r\n        this.movingAverageSeries = {}; // 이동평균선 시리즈 저장용\r\n        this.dataMap = new Map();      // 시간 기반 데이터 조회를 위한 Map\r\n        this.isSyncing = false;        // 동기화 중복 방지 플래그\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        console.log('Initializing StockChart...');\r\n        this.createChart();\r\n        this.setupEventListeners();\r\n        this.fetchChartData();\r\n    }\r\n\r\n    // 숫자 포맷 (콤마, M/K 단위)\r\n    formatNumber(num, precision = 0) {\r\n        if (num === null || num === undefined || isNaN(num)) return 'N/A';\r\n        if (Math.abs(num) >= 1_000_000_000) {\r\n            return (num / 1_000_000_000).toFixed(2) + 'B';\r\n        } else if (Math.abs(num) >= 1_000_000) {\r\n            return (num / 1_000_000).toFixed(2) + 'M';\r\n        } else if (Math.abs(num) >= 1_000) {\r\n             // 거래량 외에는 K 단위 사용 안 함\r\n             return num.toLocaleString(undefined, { minimumFractionDigits: precision, maximumFractionDigits: precision });\r\n        }\r\n        return num.toLocaleString(undefined, { minimumFractionDigits: precision, maximumFractionDigits: precision });\r\n    }\r\n\r\n    // 거래량 포맷 (M/K 단위 특화)\r\n    formatVolume(num) {\r\n        if (num === null || num === undefined || isNaN(num)) return 'N/A';\r\n        if (Math.abs(num) >= 1_000_000) {\r\n            return (num / 1_000_000).toFixed(2) + 'M';\r\n        } else if (Math.abs(num) >= 1_000) {\r\n             return (num / 1_000).toFixed(2) + 'K';\r\n        }\r\n        return num.toString();\r\n    }\r\n\r\n    createChart() {\r\n        console.log('Creating chart...');\r\n\r\n        // 토스증권 스타일로 두 개의 차트 영역 생성\r\n        this.chartContainer.innerHTML = `\r\n            <div class=\"chart-separator\">\r\n                <div id=\"priceChartContainer\" style=\"width: 100%; height: 65%; position: relative;\">\r\n                    <div id=\"stockInfoPanel\" style=\"position: absolute; top: 5px; left: 5px; background: rgba(255,255,255,0.85); padding: 5px 8px; border-radius: 4px; font-size: 11px; color: black; z-index: 10; pointer-events: none; line-height: 1.4;\"></div>\r\n                </div>\r\n                <div class=\"divider\" style=\"width: 100%; height: 2px; background-color: #dddddd;\"></div>\r\n                <div id=\"volumeChartContainer\" style=\"width: 100%; height: 35%; position: relative;\">\r\n                    <div id=\"volumeInfoPanel\" style=\"position: absolute; top: 5px; left: 5px; background: rgba(255,255,255,0.85); padding: 3px 6px; border-radius: 4px; font-size: 11px; color: black; z-index: 10; pointer-events: none;\"></div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // 차트 컨테이너 크기\r\n        const containerWidth = this.chartContainer.clientWidth;\r\n        const priceChartHeight = Math.floor(this.chartContainer.clientHeight * 0.65);\r\n        const volumeChartHeight = Math.floor(this.chartContainer.clientHeight * 0.35) - 2; // 구분선 높이 2px 고려\r\n\r\n        // 공통 차트 옵션\r\n        const commonOptions = {\r\n            width: containerWidth,\r\n            layout: { \r\n                background: { color: '#ffffff' }, \r\n                textColor: '#333333',\r\n                fontFamily: \"'Open Sans', sans-serif\"\r\n            },\r\n            grid: { \r\n                vertLines: { color: '#f0f0f0' },\r\n                horzLines: { color: '#f0f0f0' }\r\n            },\r\n            crosshair: {\r\n                mode: LightweightCharts.CrosshairMode.Normal,\r\n                vertLine: { \r\n                    color: '#999999', \r\n                    width: 1, \r\n                    style: 1, \r\n                    labelBackgroundColor: '#ffffff',\r\n                    labelVisible: false // x축 라벨 숨김\r\n                },\r\n                horzLine: { \r\n                    color: '#999999', \r\n                    width: 1, \r\n                    style: 1, \r\n                    labelBackgroundColor: '#ffffff'\r\n                }\r\n            },\r\n            timeScale: {\r\n                borderColor: '#dddddd',\r\n                borderVisible: true,\r\n                timeVisible: true,\r\n                secondsVisible: false,\r\n                tickMarkFormatter: (time) => {\r\n                    const date = new Date(time * 1000);\r\n                    if (this.chartType === 'yearly') return date.getFullYear();\r\n                    if (this.chartType === 'monthly') return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n                    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n                }\r\n            },\r\n            handleScroll: true,\r\n            handleScale: true\r\n        };\r\n\r\n        // 1. 가격 차트 생성 (상단 65%)\r\n        this.priceChart = LightweightCharts.createChart(document.getElementById('priceChartContainer'), {\r\n            ...commonOptions,\r\n            height: priceChartHeight,\r\n            rightPriceScale: {\r\n                borderColor: '#dddddd',\r\n                borderVisible: true,\r\n                scaleMargins: {\r\n                    top: 0.1,\r\n                    bottom: 0.1\r\n                },\r\n                visible: true,\r\n                autoScale: true\r\n            }\r\n        });\r\n\r\n        // 2. 거래량 차트 생성 (하단 35%)\r\n        this.volumeChart = LightweightCharts.createChart(document.getElementById('volumeChartContainer'), {\r\n            ...commonOptions,\r\n            height: volumeChartHeight,\r\n            rightPriceScale: {\r\n                borderColor: '#dddddd',\r\n                borderVisible: true,\r\n                scaleMargins: {\r\n                    top: 0.1,\r\n                    bottom: 0.1\r\n                },\r\n                visible: true,\r\n                autoScale: true\r\n            }\r\n        });\r\n\r\n        // 캔들스틱 시리즈 추가 (가격 차트)\r\n        this.candlestickSeries = this.priceChart.addCandlestickSeries({\r\n            upColor: '#ff3333', \r\n            downColor: '#5050ff',\r\n            borderVisible: false, \r\n            wickUpColor: '#ff3333', \r\n            wickDownColor: '#5050ff',\r\n            priceFormat: { type: 'price', precision: 0, minMove: 1 }\r\n        });\r\n\r\n        // 거래량 시리즈 추가 (거래량 차트)\r\n        this.volumeSeries = this.volumeChart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: { type: 'volume' },\r\n            priceScaleId: 'volume',\r\n            scaleMargins: {\r\n                top: 0.1,\r\n                bottom: 0.1\r\n            }\r\n        });\r\n\r\n        // 차트 싱크 설정 (스크롤 및 줌 동기화)\r\n        this.syncCharts();\r\n\r\n        // 크로스헤어 동기화 설정\r\n        this.setupCrosshairSync();\r\n\r\n        // 윈도우 리사이즈 이벤트\r\n        window.addEventListener('resize', this.handleResize.bind(this));\r\n    }\r\n\r\n    // 차트 동기화 설정\r\n    syncCharts() {\r\n        // 시간 스케일(가로축) 동기화\r\n        this.priceChart.timeScale().subscribeVisibleLogicalRangeChange(timeRange => {\r\n            if (timeRange && !this.isSyncing) {\r\n                this.isSyncing = true;\r\n                this.volumeChart.timeScale().setVisibleLogicalRange(timeRange);\r\n                this.isSyncing = false;\r\n            }\r\n        });\r\n\r\n        this.volumeChart.timeScale().subscribeVisibleLogicalRangeChange(timeRange => {\r\n            if (timeRange && !this.isSyncing) {\r\n                this.isSyncing = true;\r\n                this.priceChart.timeScale().setVisibleLogicalRange(timeRange);\r\n                this.isSyncing = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    // 날짜 포맷 함수 분리\r\n    formatDateForDisplay(date) {\r\n        switch(this.chartType) {\r\n            case 'yearly': return date.getFullYear().toString();\r\n            case 'monthly': return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n            case 'daily':\r\n            case 'weekly': return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n            case 'minute': return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n            default: return date.toLocaleDateString('ko-KR');\r\n        }\r\n    }\r\n\r\n    setupEventListeners() {\r\n        const stockSelect = document.getElementById('stockSelector');\r\n        stockSelect.value = this.stockCode;\r\n        stockSelect.addEventListener('change', (e) => {\r\n            this.stockCode = e.target.value;\r\n            const stockOption = stockSelect.options[stockSelect.selectedIndex];\r\n            this.stockInfo = stockOption.textContent;\r\n            this.fetchChartData();\r\n        });\r\n\r\n        const minuteSelect = document.getElementById('minuteSelector');\r\n        minuteSelect.addEventListener('change', (e) => {\r\n            this.minuteType = e.target.value;\r\n            this.fetchChartData();\r\n        });\r\n\r\n        const chartTypeBtns = document.querySelectorAll('.chart-type-btn');\r\n        chartTypeBtns.forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const newType = e.target.dataset.type;\r\n                chartTypeBtns.forEach(b => b.classList.remove('active'));\r\n                e.target.classList.add('active');\r\n                this.chartType = newType;\r\n                const minuteSelector = document.getElementById('minuteSelector');\r\n                minuteSelector.style.display = (newType === 'minute') ? 'block' : 'none';\r\n                this.fetchChartData();\r\n            });\r\n        });\r\n\r\n        // 윈도우 리사이즈 시 차트 크기 조정\r\n        window.addEventListener('resize', this.handleResize.bind(this));\r\n        \r\n        // 초기 리사이즈 실행\r\n        this.handleResize();\r\n\r\n        const stockOption = stockSelect.options[stockSelect.selectedIndex];\r\n        this.stockInfo = stockOption.textContent;\r\n    }\r\n\r\n    // 차트 크기 조정 처리\r\n    handleResize() {\r\n        if (!this.priceChart || !this.volumeChart) return;\r\n        \r\n        const chartWidth = this.chartContainer.clientWidth;\r\n        const totalHeight = this.chartContainer.clientHeight;\r\n        const priceChartHeight = Math.floor(totalHeight * 0.65);\r\n        const volumeChartHeight = Math.floor(totalHeight * 0.35) - 2; // 구분선 높이 2px 고려\r\n        \r\n        // 차트 크기 조정\r\n        this.priceChart.resize(chartWidth, priceChartHeight);\r\n        this.volumeChart.resize(chartWidth, volumeChartHeight);\r\n        \r\n        console.log(`차트 크기 조정: ${chartWidth}x${totalHeight} (가격: ${priceChartHeight}, 거래량: ${volumeChartHeight})`);\r\n    }\r\n\r\n    async fetchChartData() {\r\n        try {\r\n            console.log(`Fetching ${this.chartType} chart data for stock ${this.stockCode}...`);\r\n\r\n            let apiId;\r\n            let requestData = { stk_cd: this.stockCode, upd_stkpc_tp: \"1\" };\r\n\r\n            switch(this.chartType) {\r\n                case 'minute': apiId = 'KA10080'; requestData.tic_scope = this.minuteType; break;\r\n                case 'daily': apiId = 'KA10081'; break;\r\n                case 'weekly': apiId = 'KA10082'; break;\r\n                case 'monthly': apiId = 'KA10083'; break;\r\n                case 'yearly': apiId = 'KA10094'; break;\r\n                default: apiId = 'KA10081';\r\n            }\r\n\r\n            const response = await fetch(`/api/stock/daily-chart/${this.stockCode}?apiId=${apiId}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(requestData)\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Received data:', data);\r\n\r\n            let chartData;\r\n            switch(this.chartType) {\r\n                case 'monthly': chartData = data.stk_mth_pole_chart_qry; break;\r\n                case 'daily': chartData = data.stk_dt_pole_chart_qry; break;\r\n                case 'weekly': chartData = data.stk_stk_pole_chart_qry; break;\r\n                case 'yearly': chartData = data.stk_yr_pole_chart_qry; break;\r\n                case 'minute': chartData = data.stk_min_pole_chart_qry || data.stk_stk_pole_chart_qry; break;\r\n                default: chartData = data.stk_dt_pole_chart_qry;\r\n            }\r\n\r\n            if (chartData && chartData.length > 0) {\r\n                const processedData = [];\r\n                \r\n                // 데이터 처리\r\n                for (const item of chartData) {\r\n                    // 날짜/시간 처리\r\n                    let dateStr = (this.chartType === 'minute') ? item.cntr_tm : (item.dt || item.trd_dt);\r\n                    if (!dateStr) continue;\r\n\r\n                    // 날짜 생성\r\n                    let timestamp;\r\n                    try {\r\n                        if (this.chartType === 'yearly' && dateStr.length === 4) {\r\n                            // 년도 데이터 처리 (YYYY)\r\n                            timestamp = new Date(parseInt(dateStr), 0, 1).getTime() / 1000;\r\n                        } else if (this.chartType === 'minute' && dateStr.length === 14) {\r\n                            // 분 데이터 처리 (YYYYMMDDhhmmss)\r\n                            timestamp = new Date(\r\n                                parseInt(dateStr.slice(0,4)),\r\n                                parseInt(dateStr.slice(4,6))-1,\r\n                                parseInt(dateStr.slice(6,8)),\r\n                                parseInt(dateStr.slice(8,10)),\r\n                                parseInt(dateStr.slice(10,12))\r\n                            ).getTime() / 1000;\r\n                        } else if (dateStr.length === 8) {\r\n                            // 일/주/월 데이터 처리 (YYYYMMDD)\r\n                            timestamp = new Date(\r\n                                parseInt(dateStr.slice(0,4)),\r\n                                parseInt(dateStr.slice(4,6))-1,\r\n                                parseInt(dateStr.slice(6,8))\r\n                            ).getTime() / 1000;\r\n                        } else {\r\n                            console.log('Invalid date format:', dateStr);\r\n                            continue;\r\n                        }\r\n                    } catch (e) {\r\n                        console.log('Date parsing error:', e, dateStr);\r\n                        continue;\r\n                    }\r\n\r\n                    if (isNaN(timestamp)) {\r\n                        console.log('Invalid timestamp for date:', dateStr);\r\n                        continue;\r\n                    }\r\n\r\n                    // 가격 데이터 처리\r\n                    let close = parseFloat(item.cur_prc || item.clos_prc);\r\n                    if (isNaN(close)) continue;\r\n                    \r\n                    let open = parseFloat(item.open_pric || item.open_prc);\r\n                    let high = parseFloat(item.high_pric || item.high_prc);\r\n                    let low = parseFloat(item.low_pric || item.low_prc);\r\n                    let volume = parseFloat(item.trde_qty || item.trd_qty) || 0;\r\n                    \r\n                    // NaN 값 처리\r\n                    if (isNaN(open)) open = close;\r\n                    if (isNaN(high)) high = Math.max(close, open);\r\n                    if (isNaN(low)) low = Math.min(close, open);\r\n                    \r\n                    processedData.push({\r\n                        time: timestamp,\r\n                        open, high, low, close, volume\r\n                    });\r\n                }\r\n\r\n                if (processedData.length > 0) {\r\n                    // 시간순 정렬\r\n                    processedData.sort((a, b) => a.time - b.time);\r\n                    \r\n                    // 캔들스틱 데이터\r\n                    const candlestickData = processedData.map(({ time, open, high, low, close }) => ({\r\n                        time, open, high, low, close\r\n                    }));\r\n                    \r\n                    // 거래량 데이터 - 색상 설정 (상승 빨강, 하락 파랑)\r\n                    const volumeData = processedData.map(({ time, volume, open, close }) => ({\r\n                        time,\r\n                        value: volume,\r\n                        color: close >= open ? '#ff3333' : '#5050ff'  // 상승(빨강), 하락(파랑)\r\n                    }));\r\n                    \r\n                    // 데이터 설정\r\n                    this.candlestickSeries.setData(candlestickData);\r\n                    this.volumeSeries.setData(volumeData);\r\n                    \r\n                    // 차트 타입에 맞게 옵션 업데이트\r\n                    this.updateChartOptionsForType();\r\n                    \r\n                    // 차트 스케일 조정 (두 차트 모두)\r\n                    this.priceChart.timeScale().fitContent();\r\n                    this.volumeChart.timeScale().fitContent();\r\n                    \r\n                    // 데이터 맵 저장 (정보 패널용)\r\n                    this.dataMap = new Map(processedData.map(d => [d.time, d]));\r\n                    this.latestData = processedData[processedData.length - 1];\r\n                    \r\n                    // 정보 패널 업데이트\r\n                    this.updateInfoPanel(null);\r\n                    \r\n                    return;\r\n                }\r\n            }\r\n            \r\n            // 유효한 데이터가 없는 경우\r\n            console.error('No valid chart data found');\r\n            this.candlestickSeries.setData([]);\r\n            this.volumeSeries.setData([]);\r\n            this.dataMap.clear();\r\n            this.latestData = null;\r\n            \r\n        } catch (error) {\r\n            console.error('Error fetching chart data:', error);\r\n            this.candlestickSeries.setData([]);\r\n            this.volumeSeries.setData([]);\r\n            this.dataMap.clear();\r\n            this.latestData = null;\r\n        }\r\n    }\r\n\r\n    // 차트 타입에 따른 옵션 업데이트 함수 \r\n    updateChartOptionsForType() {\r\n        const timeScaleOptions = {\r\n            timeVisible: this.chartType === 'minute',\r\n            secondsVisible: false\r\n        };\r\n\r\n        // 두 차트 모두 옵션 업데이트\r\n        this.priceChart.applyOptions({ \r\n            timeScale: timeScaleOptions\r\n        });\r\n        this.volumeChart.applyOptions({ \r\n            timeScale: timeScaleOptions\r\n        });\r\n    }\r\n\r\n    // 정보 패널 업데이트 로직\r\n    updateInfoPanel = (time) => {\r\n        let displayTime = time;\r\n        let dataPoint = null;\r\n\r\n        if (displayTime === null && this.latestData) { // 마우스 벗어남 -> 최신 데이터 사용\r\n            displayTime = this.latestData.time;\r\n        }\r\n\r\n        if (displayTime !== null) {\r\n            dataPoint = this.dataMap.get(displayTime); // Map에서 데이터 조회\r\n        }\r\n\r\n        // 데이터 없으면 패널 숨김\r\n        if (!dataPoint) {\r\n            document.getElementById('stockInfoPanel').style.display = 'none';\r\n            document.getElementById('volumeInfoPanel').style.display = 'none';\r\n            return;\r\n        }\r\n\r\n        const date = new Date(dataPoint.time * 1000);\r\n        let dateStr = this.formatDateForDisplay(date);\r\n        const volumeValue = dataPoint.volume ?? 0;\r\n\r\n        // 유효성 검사\r\n        if (isNaN(dataPoint.open) || isNaN(dataPoint.high) || isNaN(dataPoint.low) || isNaN(dataPoint.close) || isNaN(volumeValue)) {\r\n            document.getElementById('stockInfoPanel').style.display = 'none';\r\n            document.getElementById('volumeInfoPanel').style.display = 'none';\r\n            return;\r\n        }\r\n\r\n        const priceChange = dataPoint.close - dataPoint.open;\r\n        const priceChangePercent = dataPoint.open === 0 ? 0 : (priceChange / dataPoint.open * 100);\r\n        const priceDirection = priceChange >= 0 ? 'up' : 'down';\r\n        const sign = priceChange >= 0 ? '+' : '';\r\n        const color = priceDirection === 'up' ? '#ff3333' : '#5050ff'; // 빨강/파랑\r\n\r\n        // 패널 업데이트\r\n        let stockCodeName = this.stockInfo || this.stockCode;\r\n        document.getElementById('stockInfoPanel').innerHTML = `\r\n            <span style=\"font-weight: bold;\">${stockCodeName}</span> <span style=\"font-size: 10px;\">${dateStr}</span><br>\r\n            <span>시가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.open)}</span></span>\r\n            <span style=\"margin-left: 5px;\">고가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.high)}</span></span>\r\n            <span style=\"margin-left: 5px;\">저가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.low)}</span></span>\r\n            <span style=\"margin-left: 5px;\">종가 <span style=\"color: ${color};\">${this.formatNumber(dataPoint.close)}</span></span>\r\n            <span style=\"color: ${color}; margin-left: 5px;\">(${sign}${this.formatNumber(priceChange)} ${sign}${priceChangePercent.toFixed(2)}%)</span>\r\n        `;\r\n        document.getElementById('volumeInfoPanel').innerHTML = `\r\n            거래량 <span style=\"color: ${color};\">${this.formatVolume(volumeValue)}</span>\r\n        `;\r\n\r\n        document.getElementById('stockInfoPanel').style.display = 'block';\r\n        document.getElementById('volumeInfoPanel').style.display = 'block';\r\n    };\r\n\r\n    // 크로스헤어 동기화 및 정보 패널 업데이트 로직\r\n    setupCrosshairSync() {\r\n        // 크로스헤어 동기화 (두 차트 간)\r\n        this.priceChart.subscribeCrosshairMove(param => {\r\n            if (!param.point || !param.time) {\r\n                this.volumeChart.clearCrosshairPosition();\r\n                \r\n                if (!param.point) {\r\n                    // 마우스가 차트 영역을 벗어나면 최신 데이터 표시\r\n                    this.updateInfoPanel(null);\r\n                }\r\n                return;\r\n            }\r\n            \r\n            // 거래량 차트 크로스헤어 동기화\r\n            this.volumeChart.setCrosshairPosition(param.point, param.time);\r\n            \r\n            // 정보 패널 업데이트\r\n            this.updateInfoPanel(param.time);\r\n        });\r\n        \r\n        this.volumeChart.subscribeCrosshairMove(param => {\r\n            if (!param.point || !param.time) {\r\n                this.priceChart.clearCrosshairPosition();\r\n                return;\r\n            }\r\n            \r\n            // 가격 차트 크로스헤어 동기화\r\n            this.priceChart.setCrosshairPosition(param.point, param.time);\r\n            \r\n            // 정보 패널 업데이트\r\n            this.updateInfoPanel(param.time);\r\n        });\r\n        \r\n        // 마우스가 차트 컨테이너를 벗어날 때 처리\r\n        this.chartContainer.addEventListener('mouseleave', () => {\r\n            this.updateInfoPanel(null);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n// 차트 초기화\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new StockChart();\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}