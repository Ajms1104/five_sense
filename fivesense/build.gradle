plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'application'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.projectlombok:lombok'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-annotations'
	implementation 'org.webjars:sockjs-client:1.5.1'
	implementation 'org.webjars:stomp-websocket:2.3.4'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'com.theokanning.openai-gpt3-java:service:0.18.2'
	implementation 'com.google.guava:guava:32.1.3-jre'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// bootRun 태스크에 환경 변수 설정
bootRun {
    // 상위 폴더의 .env 파일을 읽어서 환경 변수로 설정
    def envFile = file('../.env')
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            if (line && !line.startsWith('#')) {
                def (key, value) = line.split('=', 2)
                if (key && value) {
                    environment(key.trim(), value.trim())
                }
            }
        }
    }
    sourceResources sourceSets.main
}

