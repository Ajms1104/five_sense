{"ast":null,"code":"// Rasa 챗봇 통신을 위한 함수 추가\nasync function sendMessageToRast(message) {\n  try {\n    const response = await fetch('/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.response || '서버 응답 오류');\n    }\n    const data = await response.json();\n    return data.response;\n  } catch (error) {\n    console.error('챗봇 통신 오류:', error);\n    return '죄송합니다. 현재 서버와 통신이 원활하지 않습니다.';\n  }\n}\n\n// 입력칸 이벤트 리스너 설정\ndocument.addEventListener('DOMContentLoaded', () => {\n  const inputField = document.querySelector('.input-container input');\n  const submitButton = document.querySelector('#submit');\n  const chatHistory = document.querySelector('.chat-history');\n\n  // 채팅 메시지 표시 함수\n  function displayMessage(message, isUser = false) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'bot-message'}`;\n    messageDiv.textContent = message;\n    chatHistory.appendChild(messageDiv);\n    chatHistory.scrollTop = chatHistory.scrollHeight;\n  }\n\n  // 엔터키로 전송\n  inputField.addEventListener('keypress', async e => {\n    if (e.key === 'Enter') {\n      const message = inputField.value.trim();\n      if (message) {\n        displayMessage(message, true);\n        inputField.value = '';\n        const response = await sendMessageToRast(message);\n        displayMessage(response);\n      }\n    }\n  });\n\n  // 버튼 클릭으로 전송\n  submitButton.addEventListener('click', async () => {\n    const message = inputField.value.trim();\n    if (message) {\n      displayMessage(message, true);\n      inputField.value = '';\n      const response = await sendMessageToRast(message);\n      displayMessage(response);\n    }\n  });\n});","map":{"version":3,"names":["sendMessageToRast","message","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","data","error","console","document","addEventListener","inputField","querySelector","submitButton","chatHistory","displayMessage","isUser","messageDiv","createElement","className","textContent","appendChild","scrollTop","scrollHeight","e","key","value","trim"],"sources":["C:/Users/moshu/Documents/team_fivesense/five_sense/fivesense/frontend/src/js/chat.js"],"sourcesContent":["// Rasa 챗봇 통신을 위한 함수 추가\r\nasync function sendMessageToRast(message) {\r\n    try {\r\n        const response = await fetch('/api/chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ message: message })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.response || '서버 응답 오류');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data.response;\r\n    } catch (error) {\r\n        console.error('챗봇 통신 오류:', error);\r\n        return '죄송합니다. 현재 서버와 통신이 원활하지 않습니다.';\r\n    }\r\n}\r\n\r\n// 입력칸 이벤트 리스너 설정\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const inputField = document.querySelector('.input-container input');\r\n    const submitButton = document.querySelector('#submit');\r\n    const chatHistory = document.querySelector('.chat-history');\r\n    \r\n    // 채팅 메시지 표시 함수\r\n    function displayMessage(message, isUser = false) {\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat-message ${isUser ? 'user-message' : 'bot-message'}`;\r\n        messageDiv.textContent = message;\r\n        chatHistory.appendChild(messageDiv);\r\n        chatHistory.scrollTop = chatHistory.scrollHeight;\r\n    }\r\n    \r\n    // 엔터키로 전송\r\n    inputField.addEventListener('keypress', async (e) => {\r\n        if (e.key === 'Enter') {\r\n            const message = inputField.value.trim();\r\n            if (message) {\r\n                displayMessage(message, true);\r\n                inputField.value = '';\r\n                const response = await sendMessageToRast(message);\r\n                displayMessage(response);\r\n            }\r\n        }\r\n    });\r\n    \r\n    // 버튼 클릭으로 전송\r\n    submitButton.addEventListener('click', async () => {\r\n        const message = inputField.value.trim();\r\n        if (message) {\r\n            displayMessage(message, true);\r\n            inputField.value = '';\r\n            const response = await sendMessageToRast(message);\r\n            displayMessage(response);\r\n        }\r\n    });\r\n});"],"mappings":"AAAA;AACA,eAAeA,iBAAiBA,CAACC,OAAO,EAAE;EACtC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;MACtCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,OAAO,EAAEA;MAAQ,CAAC;IAC7C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACR,QAAQ,IAAI,UAAU,CAAC;IACrD;IAEA,MAAMW,IAAI,GAAG,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOE,IAAI,CAACX,QAAQ;EACxB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,8BAA8B;EACzC;AACJ;;AAEA;AACAE,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChD,MAAMC,UAAU,GAAGF,QAAQ,CAACG,aAAa,CAAC,wBAAwB,CAAC;EACnE,MAAMC,YAAY,GAAGJ,QAAQ,CAACG,aAAa,CAAC,SAAS,CAAC;EACtD,MAAME,WAAW,GAAGL,QAAQ,CAACG,aAAa,CAAC,eAAe,CAAC;;EAE3D;EACA,SAASG,cAAcA,CAACrB,OAAO,EAAEsB,MAAM,GAAG,KAAK,EAAE;IAC7C,MAAMC,UAAU,GAAGR,QAAQ,CAACS,aAAa,CAAC,KAAK,CAAC;IAChDD,UAAU,CAACE,SAAS,GAAG,gBAAgBH,MAAM,GAAG,cAAc,GAAG,aAAa,EAAE;IAChFC,UAAU,CAACG,WAAW,GAAG1B,OAAO;IAChCoB,WAAW,CAACO,WAAW,CAACJ,UAAU,CAAC;IACnCH,WAAW,CAACQ,SAAS,GAAGR,WAAW,CAACS,YAAY;EACpD;;EAEA;EACAZ,UAAU,CAACD,gBAAgB,CAAC,UAAU,EAAE,MAAOc,CAAC,IAAK;IACjD,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACnB,MAAM/B,OAAO,GAAGiB,UAAU,CAACe,KAAK,CAACC,IAAI,CAAC,CAAC;MACvC,IAAIjC,OAAO,EAAE;QACTqB,cAAc,CAACrB,OAAO,EAAE,IAAI,CAAC;QAC7BiB,UAAU,CAACe,KAAK,GAAG,EAAE;QACrB,MAAM/B,QAAQ,GAAG,MAAMF,iBAAiB,CAACC,OAAO,CAAC;QACjDqB,cAAc,CAACpB,QAAQ,CAAC;MAC5B;IACJ;EACJ,CAAC,CAAC;;EAEF;EACAkB,YAAY,CAACH,gBAAgB,CAAC,OAAO,EAAE,YAAY;IAC/C,MAAMhB,OAAO,GAAGiB,UAAU,CAACe,KAAK,CAACC,IAAI,CAAC,CAAC;IACvC,IAAIjC,OAAO,EAAE;MACTqB,cAAc,CAACrB,OAAO,EAAE,IAAI,CAAC;MAC7BiB,UAAU,CAACe,KAAK,GAAG,EAAE;MACrB,MAAM/B,QAAQ,GAAG,MAAMF,iBAAiB,CAACC,OAAO,CAAC;MACjDqB,cAAc,CAACpB,QAAQ,CAAC;IAC5B;EACJ,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}